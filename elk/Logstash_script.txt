План вебінару:
ELK це абревіатура що означає Elasticsearch + Logstash + Kibana - продукти компанії Elastic.co 
Elasticsearch - це центрова частина стеку, це NoSQL, а саме документо-орієнтована база даних.
Написана на java, дозволяє зберігати документи, як хороший приклад можна розглядати json-документи. тобто структуровану, у якої є поля (ключі), 
в них зберігаються значення, значення можуть бути скалярами, літералами, або вкладеними структурами - масиви вкладені об'єкти тощо. 
Schema-free означає що структура документів не зобов'язана бути наперед визначеною, або типи полів повністью співпадати, але насправді є обмеження.
Є HTTP-api, переважна робота через http-запити з json, бібліотеки також представляють собою обгортки над http. 
Особливість ES - це пошук по тексту, в тому числі "fuzzy search" - тобто пошуковий запит має помилки, пропущені, поміняні між собою місцями літери. і пошук доволі швидкий,
Але це більше для розробників, а для девопса важливим буде що він на java, всі плюси та мінуси джави - потужний мультітред, споживання пам'яті, garbage collector, heap.
Також те що він підтримує горізонтальне масштабування по принципу sharding + replicas

слайд 4 Elasticsearch terms:
кластер - це сукупність нод,
нода - це екземпляр, технічно ноди можуть працювати як на одній так і на декількох машинах. 
Ноди можуть мати "ролі",  основні ролі це "датанода", "мастер", "ingest". в однонодовій всі ці ролі виконує єдина машина.
в многонодовій конфігуорації для кожної ноди одні ролі можуть бути увімкнені, інші вімкнені. 
Якщо нода має роль датанода - то вона буде сбергіати дані та обробляти запити на пошук, якщо ні - то відповідно не буде.
кластеру також потрібна нода яка має роль мастер - це роль яка знає на якій датаноді знаходяться які індекси та його частини(шарди). 
не треба плутати слово мастер з терміном з "мастер слейв реплікацією". мастер-нода не пише дані клієнта. 
їх роблять 2n+1 штук, щоб було можливо перезавантажити, тобто втратити ноду і роль мастера приняла на себе інша нода. 
ingest - це розвиток ролі яку виконує logstash які були перенесені всередину elasticsearch. Саме тому в сучасних ELK випадає потреба logstash, і еластік воліє називати ELK як Elastic stack.

Індекс  - це колекція документів, еквівалент таблиці в реляційній бд, або колекції в монго. 
хоча Elasticsearch заявляє себе Schema-free, але є обмеження, в тому що однакові за назвою поля в одному індексі повинні бути одного типу. (з 6.8 версії заборонили взагалі)
типів там підтримується набагато більше ніж в json, але зрозумілі переважно це текст, різного роду числа, ренжі, координати, ip-адреси
а також складні об'єкти - типу flatted/nested об'єкти з типів що вище.

Шард - це частина індексу, яка з точки зору мастер-ноди розглядається атомарною одиницєю. суть в тому що індекс при створенні розбивається на декілька частей, шардів, в шардах зберігається інформація про різні документи.
Якщо нод більше 1, то для шарда може бути створена "репліка" - копія шарда на іншій ноді, а головна частина шарда - називається примарі. тут можна сказати що між примарі-шардом та його репліками працює "мастер-слейв" реплікація. 
Якщо нода випадає з кластеру і на ній були примари-шарди то його репліка промотиться до примарі.
Для одного шарда може бути більше ніж 1 репліка, це збільшує його durability, може розмазати навантаження на ноди, але за рахунок того що більше hdd, і навантаження на запис не зникає, а також збільшується.
Кількість реплік - це властивість індекса, по дефолту це 0, або 1. 
тобто якщо 1 нода в кластері то реплік - то індекси мають лише один екземлял і це примарі. 
тобто якщо 2+ ноди в кластері то реплік - то індекси мають примарі + 1 копію (репліку), тобто даних 2 копії. і так далі, репліка 3 означає 4 копії.

роль мастернод, це управляти саме цим. коли індексів дофіга, вони  ствоюються, видаляються, то це додаткове високе навантаження на мастер, тому в високопродуктивних кластерах їх виносять на окремі ноди без ролі обробки даних. 
кількість шардів на ноду - є параметром, який обмежений пам'ятю, бажаний розмір шардів індекс не більше 50гб 


Logstash - це опенсорсне ПЗ, написано на jruby та java. 
використовується для обробки та аналізу логів. Він може збирати лог-файли з різних джерел, фільтрувати, збагачувати, трансформувати та записувати у різні сховища даних.
Підтримує плагіни, тому може гнучко та потужно бути налаштовано.
java - це з одного боку прожерливість в CPU/RAM ресурсах, з іншого там потужний гнучкий multithread.

Основні можливості Logstash:
Збір даних: Logstash може збирати лог-файли з різних джерел, таких як файли, мережеві порти та базовані на них технології, snmp, syslog, вебхуки, веб-додатки, бази даних через jdbc, і навіть exec довільного бінаря.
Фільтрація даних: Logstash може фільтрувати лог-файли за певними критеріями, щоб видалити непотрібні записи або зосередитися на певних подіях.
Трансформація даних: Logstash може трансформувати лог-файли, наприклад щоб привести їх до спільного формату, універсальний timestamp, екстракція даних, або збагатити їх зовнішньою додатковою інформацією.
Зберігання даних: Logstash може записувати лог-файли у різні сховища даних, по дефолту це Elasticsearch, але можуть бути широкий діапазон Outputs, і навіть можна закинути event оброблятись в інший пайплайн, як готовий об'єкт event.

ELK використовується для централізованого збору та аналізу логів: 
Logstash може збирати лог-файли з усіх ваших серверів і систем в одному місці, що робить їх аналіз більш зручним.

Logstash конфігурується наступним чином:
Головний конфінг

2. Пайплайн Logstash (20 хвилин)
конфіг який описує pipline виглядає так:

    Що таке пайплайн Logstash?
    Основні компоненти пайплайну Logstash:
        Входи (Inputs)
        Фільтри (Filters)
        Виходи (Outputs)
    Демонстрація створення простого пайплайну

Logstash можна запускати як java-застосунок з pipeline

    
3. Розширені можливості Logstash (20 хвилин)

    Використання плагінів для розширення функціональності
    Управління пайплайнами Logstash
    Моніторинг та налагодження пайплайнів

4. Питання та відповіді (10 хвилин)

Демонстрація:

    Демонстрація буде включати в себе створення простого пайплайну Logstash, який буде збирати лог-файли, фільтрувати їх та записувати у базу даних.

Питання та відповіді:

    Учасники вебінару матимуть можливість задати питання спікеру
    
    


Using bundled JDK: /usr/share/logstash/jdk
OpenJDK 64-Bit Server VM warning: Option UseConcMarkSweepGC was deprecated in version 9.0 and will likely be removed in a future release.
WARNING: Could not find logstash.yml which is typically located in $LS_HOME/config or /etc/logstash. You can specify the path using --path.settings. Continuing using the defaults
Usage:
    bin/logstash [OPTIONS]

Options:
    -n, --node.name NAME          Specify the name of this logstash instance, if no value is given
                                  it will default to the current hostname.
                                   (default: "u22")
    --enable-local-plugin-development Allow Gemfile to be manipulated directly
                                  to facilitate simpler local plugin
                                  development.
                                  This is an advanced setting, intended
                                  only for use by Logstash developers,
                                  and should not be used in production.
                                   (default: false)
    -f, --path.config CONFIG_PATH Load the logstash config from a specific file
                                  or directory.  If a directory is given, all
                                  files in that directory will be concatenated
                                  in lexicographical order and then parsed as a
                                  single config file. You can also specify
                                  wildcards (globs) and any matched files will
                                  be loaded in the order described above.
    -e, --config.string CONFIG_STRING Use the given string as the configuration
                                  data. Same syntax as the config file. If no
                                  input is specified, then the following is
                                  used as the default input:
                                  "input { stdin { type => stdin } }"
                                  and if no output is specified, then the
                                  following is used as the default output:
                                  "output { stdout { codec => rubydebug } }"
                                  If you wish to use both defaults, please use
                                  the empty string for the '-e' flag.
                                   (default: nil)
    --modules MODULES             Load Logstash modules.
                                  Modules can be defined using multiple instances
                                  '--modules module1 --modules module2',
                                     or comma-separated syntax
                                  '--modules=module1,module2'
                                  Cannot be used in conjunction with '-e' or '-f'
                                  Use of '--modules' will override modules declared
                                  in the 'logstash.yml' file.
    -M, --modules.variable MODULES_VARIABLE Load variables for module template.
                                  Multiple instances of '-M' or
                                  '--modules.variable' are supported.
                                  Ignored if '--modules' flag is not used.
                                  Should be in the format of
                                  '-M "MODULE_NAME.var.PLUGIN_TYPE.PLUGIN_NAME.VARIABLE_NAME=VALUE"'
                                  as in
                                  '-M "example.var.filter.mutate.fieldname=fieldvalue"'
    --setup                       Load index template into Elasticsearch, and saved searches, 
                                  index-pattern, visualizations, and dashboards into Kibana when
                                  running modules.
                                   (default: false)
    --cloud.id CLOUD_ID           Sets the elasticsearch and kibana host settings for
                                  module connections in Elastic Cloud.
                                  Your Elastic Cloud User interface or the Cloud support
                                  team should provide this.
                                  Add an optional label prefix '<label>:' to help you
                                  identify multiple cloud.ids.
                                  e.g. 'staging:dXMtZWFzdC0xLmF3cy5mb3VuZC5pbyRub3RhcmVhbCRpZGVudGlmaWVy'
    --cloud.auth CLOUD_AUTH       Sets the elasticsearch and kibana username and password
                                  for module connections in Elastic Cloud
                                  e.g. 'username:<password>'
    --pipeline.id ID              Sets the ID of the pipeline.
                                   (default: "main")
    -w, --pipeline.workers COUNT  Sets the number of pipeline workers to run.
                                   (default: 1)
    --pipeline.ordered ORDERED    Preserve events order. Possible values are `auto` (default), `true` and `false`.
                                  This setting
                                  will only work when also using a single worker for the pipeline.
                                  Note that when enabled, it may impact the performance of the filters
                                  and ouput processing.
                                  The `auto` option will automatically enable ordering if the
                                  `pipeline.workers` setting is set to `1`.
                                  Use `true` to enable ordering on the pipeline and prevent logstash
                                  from starting if there are multiple workers.
                                  Use `false` to disable any extra processing necessary for preserving
                                  ordering.
                                   (default: "auto")
    --java-execution              Use Java execution engine.
                                   (default: true)
    --plugin-classloaders         (Beta) Load Java plugins in independent classloaders to isolate their dependencies.
                                   (default: false)
    -b, --pipeline.batch.size SIZE Size of batches the pipeline is to work in.
                                   (default: 125)
    -u, --pipeline.batch.delay DELAY_IN_MS When creating pipeline batches, how long to wait while polling
                                  for the next event.
                                   (default: 50)
    --pipeline.unsafe_shutdown    Force logstash to exit during shutdown even
                                  if there are still inflight events in memory.
                                  By default, logstash will refuse to quit until all
                                  received events have been pushed to the outputs.
                                   (default: false)
    --pipeline.ecs_compatibility STRING Sets the pipeline's default value for `ecs_compatibility`,
                                  a setting that is available to plugins that implement
                                  an ECS Compatibility mode for use with the Elastic Common
                                  Schema.
                                  Possible values are:
                                   - disabled (default)
                                   - v1
                                   - v2
                                  This option allows the early opt-in (or preemptive opt-out)
                                  of ECS Compatibility modes in plugins, which is scheduled to
                                  be on-by-default in a future major release of Logstash.
                                  
                                  Values other than `disabled` are currently considered BETA,
                                  and may produce unintended consequences when upgrading Logstash.
                                   (default: "disabled")
    --path.data PATH              This should point to a writable directory. Logstash
                                  will use this directory whenever it needs to store
                                  data. Plugins will also have access to this path.
                                   (default: "/usr/share/logstash/data")
    -p, --path.plugins PATH       A path of where to find plugins. This flag
                                  can be given multiple times to include
                                  multiple paths. Plugins are expected to be
                                  in a specific directory hierarchy:
                                  'PATH/logstash/TYPE/NAME.rb' where TYPE is
                                  'inputs' 'filters', 'outputs' or 'codecs'
                                  and NAME is the name of the plugin.
                                   (default: [])
    -l, --path.logs PATH          Write logstash internal logs to the given
                                  file. Without this flag, logstash will emit
                                  logs to standard output.
                                   (default: "/usr/share/logstash/logs")
    --log.level LEVEL             Set the log level for logstash. Possible values are:
                                    - fatal
                                    - error
                                    - warn
                                    - info
                                    - debug
                                    - trace
                                   (default: "info")
    --config.debug                Print the compiled config ruby code out as a debug log (you must also have --log.level=debug enabled).
                                  WARNING: This will include any 'password' options passed to plugin configs as plaintext, and may result
                                  in plaintext passwords appearing in your logs!
                                   (default: false)
    -i, --interactive SHELL       Drop to shell instead of running as normal.
                                  Valid shells are "irb" and "pry"
    -V, --version                 Emit the version of logstash and its friends,
                                  then exit.
    -t, --config.test_and_exit    Check configuration for valid syntax and then exit.
                                   (default: false)
    -r, --config.reload.automatic Monitor configuration changes and reload
                                  whenever it is changed.
                                  NOTE: use SIGHUP to manually reload the config
                                   (default: false)
    --config.reload.interval RELOAD_INTERVAL How frequently to poll the configuration location
                                  for changes, in seconds.
                                   (default: #<Java::OrgLogstashUtil::TimeValue:0x1ca73158>)
    --api.enabled ENABLED         Can be used to disable the Web API, which is
                                  enabled by default.
                                   (default: true)
    --api.http.host HTTP_HOST     Web API binding host (default: "127.0.0.1")
    --api.http.port HTTP_PORT     Web API http port (default: 9600..9700)
    --log.format FORMAT           Specify if Logstash should write its own logs in JSON form (one
                                  event per line) or in plain text (using Ruby's Object#inspect)
                                   (default: "plain")
    --path.settings SETTINGS_DIR  Directory containing logstash.yml file. This can also be
                                  set through the LS_SETTINGS_DIR environment variable.
                                   (default: "/usr/share/logstash/config")
    --verbose                     Set the log level to info.
                                  DEPRECATED: use --log.level=info instead.
    --debug                       Set the log level to debug.
                                  DEPRECATED: use --log.level=debug instead.
    --quiet                       Set the log level to info.
                                  DEPRECATED: use --log.level=info instead.
    --http.enabled                Can be used to disable the Web API, which is
                                  enabled by default.
                                  DEPRECATED: use `--api.enabled=false`
    --http.host HTTP_HOST         Web API binding host
                                  DEPRECATED: use `--api.http.host=IP`
    --http.port HTTP_PORT         Web API http port
                                  DEPRECATED: use `--api.http.port=PORT`
    -h, --help                    print help
